mod salt;

use std::fs::File;
use std::io::Write;
use rand::Rng;


fn main() -> Result<(), std::io::Error>
{
    let mut rng = rand::thread_rng();
    let mut xs_gen = salt::XorShift128::from_seed(rng.gen::<u64>(), rng.gen::<u64>());
    let salt = format!("{:x}", xs_gen.pick());


    let mut file = File::create("src/lib.rs").unwrap();
    
    // Generation of lib.rs
   
    write!(&mut file, "{}", r#"
/*
 *
 * FILE AUTOGENERATED BY build.rs
 *
 */

pub mod asmcalls;
pub mod ntcalls;
pub mod err;
pub mod oncecell;

use oncecell::*;
use ntcalls::*;

// Reexports the assembly direct calls skeletons 
// for cleaner use
pub use crate::asmcalls::*;

"#)?;

    writeln!(&mut file, "pub static SALT: &str = \"{}\";", salt)?;
    writeln!(&mut file, "{}", "pub static NT: OnceCell<NTApi> = OnceCell::new(|| {NTApi::new().unwrap()} );")?; 
    
    Ok(())
}


